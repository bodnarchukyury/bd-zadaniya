1
SELECT name, surname
FROM student
WHERE score > 4 AND score < 4.5

SELECT name, surname
FROM student
WHERE score BETWEEN 4 AND 4.5
2
SELECT n_group
from student
WHERE CAST (n_group AS varchar) like ('%6%')
3
SELECT *
FROM student
ORDER BY n_group DESC,name ASC
4
SELECT *
FROM student
WHERE score > 4 order by score desc
5
SELECT name,risk
from hobby
WHERE name like 'Футбол' OR name like '%Хок%'
GROUP BY risk,name
6
SELECT hobby_id,student_id
from student_hobby
where date_start > '2005.01.01' and date_start < '2016.01.01' and date_finish is null
7
SELECT *
from student
WHERE score > 4.5
ORDER BY score desc
8
SELECT *
from student
WHERE score > 4
ORDER BY score desc limit 5
9
SELECT name,risk,
CASE
WHEN risk >=0.8 THEN 'очень высокий'
WHEN risk >=0.6 and risk < 0.8 THEN 'высокий?'
WHEN risk >=0.4 and risk < 0.6 THEN 'средний'
WHEN risk >=0.2 and risk <0.4 THEN 'низкий'
WHEN risk <0.2 THEN 'очень низкий'
END
FROM hobby
10
SELECT *
FROM hobby
ORDER BY risk desc limit 3


1
SELECT n_group,
COUNT(n_group) AS stud_count
FROM student
GROUP BY n_group
ORDER BY n_group DESC;
2
SELECT n_group, MAX(score)
FROM student
GROUP BY n_group
3
SELECT surname, COUNT(*)
FROM student
GROUP BY surname
4
SELECT date_birth,COUNT(*)
FROM student
GROUP BY date_birth
5
SELECT n_group,AVG(score)::real
FROM student
group by n_group
6
SELECT n_group,MAX(score)
from student
WHERE CAST (n_group AS varchar) like ('2222')
GROUP By n_group
7
SELECT n_group,score
FROM student
WHERE score <= 3.5
ORDER BY score
8
SELECT n_group,COUNT(id),AVG(score)::real,MAX(score),MIN(score)
FROM student
GROUP BY n_group
9
SELECT *
FROM student
WHERE (score, n_group) IN (
SELECT MAX(score), n_group
FROM student
GROUP BY n_group ) AND n_group = 3233
10
SELECT *
FROM student
WHERE (score, n_group) IN (
SELECT MAX(score), n_group
FROM student
GROUP BY n_group)
1
SELECT s.name, s.surname, h.name FROM student s
INNER JOIN student_hobby sh
	ON sh.student_id = s.id
INNER JOIN hobby h
	ON sh.hobby_id = h.id
ORDER BY s.id
2
WITH diff_date_sh AS(
  SELECT student_id,
    CASE 
      WHEN date_finish IS NULL THEN 
        CURRENT_DATE - date_start
      ELSE 
        date_finish - date_start
    END pass_days
  FROM student_hobby
)
SELECT * FROM student s
INNER JOIN diff_date_sh dsh
  ON dsh.student_id = s.id
ORDER BY dsh.pass_days DESC
LIMIT 1
3
SELECT st.id, st.name, st.surname, st.date_birth FROM student st
INNER JOIN student_hobby sh
	ON sh.student_id = st.id AND sh.date_finish IS NULL
INNER JOIN hobby h
	ON sh.hobby_id = h.id
		WHERE st.score >
(SELECT avg(score) avg_score FROM student) AND (SELECT SUM(risk) FROM hobby) > 0.9
4
SELECT st.id, st.name, st.surname, st.date_birth, h.name, sh.date_start, sh.date_finish, ((sh.date_finish - sh.date_start)/30) duration FROM student_hobby sh
INNER JOIN student st
	ON sh.student_id = st.id AND sh.date_finish IS NOT NULL
INNER JOIN hobby h
	ON sh.hobby_id = h.id
5
SELECT st.id, st.name, st.surname, st.date_birth, h.name, ((CURRENT_DATE - st.date_birth)/365) years_old FROM student_hobby sh
INNER JOIN student st
	ON sh.student_id = st.id
INNER JOIN hobby h
	ON sh.hobby_id = h.id 
6
SELECT st.n_group, avg(score)::NUMERIC(3, 2) avg_score FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id
INNER JOIN hobby h
ON sh.hobby_id = h.id AND sh.date_finish IS NOT NULL
GROUP BY st.n_group
7
SELECT st.id, st.n_group, h.name, h.risk,
(CURRENT_DATE - sh.date_start)/30 duration, sh.date_start, sh.date_finish
FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id
INNER JOIN hobby h
ON sh.hobby_id = h.id
ORDER BY duration DESC
8
SELECT h.name FROM student_hobby sh
INNER JOIN student st
ON sh.student_id = st.id
INNER JOIN hobby h
ON sh.hobby_id = h.id
WHERE st.score = (
SELECT max(score) FROM student)
9
SELECT CAST(n_group as varchar),h.name,s.score FROM student s
INNER JOIN student_hobby sh on s.id=sh.student_id
INNER JOIN hobby h 
	ON sh.hobby_id=h.id
		WHERE s.score BETWEEN 2.5 AND 3.5
GROUP BY n_group,h.name,s.score
HAVING CAST(n_group as varchar) LIKE '2%'
10
-—
11
SELECT n_group, count(id) filter(WHERE score >= 4) count4, count(id) filter(WHERE score >= 4)*1.0 / count(id)
FROM student
GROUP BY n_group
HAVING (count(id) filter (WHERE score >= 4)*1.0 / count(id)) > 0.6
